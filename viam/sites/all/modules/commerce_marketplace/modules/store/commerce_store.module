<?php

/**
 * @file
 * Defines the core Commerce Store entity, including the entity itself, the
 * bundle definitions (store types), and various API functions to manage
 * stores and interact with them through forms and autocompletes.
 */

/**
 * Merchant role name.
 */
define('COMMERCE_STORE_MERCHANT', 'merchant');

/**
 * Include permission handling file.
 */
require_once 'includes/commerce_store.permissions.inc';

/**
 * Implements hook_menu().
 */
function commerce_store_menu() {
  $items = array();

  $items['commerce_store/autocomplete'] = array(
    'title' => 'commerce_store autocomplete',
    'page callback' => 'commerce_store_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_store_menu_alter(&$items) {
  // Alter admin order page access callback so that users owning the store
  // in which an order was made have access to that order too.
  $items['admin/commerce/orders/%commerce_order']['access callback'] = 'commerce_store_admin_order_view_access';
}

/**
 * Implements hook_hook_info().
 */
function commerce_store_hook_info() {
  $hooks = array(
    'commerce_store_type_info' => array(
      'group' => 'commerce',
    ),
    'commerce_store_type_info_alter' => array(
      'group' => 'commerce',
    ),
    'commerce_store_type_insert' => array(
      'group' => 'commerce',
    ),
    'commerce_store_type_update' => array(
      'group' => 'commerce',
    ),
    'commerce_store_type_delete' => array(
      'group' => 'commerce',
    ),
    'commerce_store_uri' => array(
      'group' => 'commerce',
    ),
    'commerce_store_view' => array(
      'group' => 'commerce',
    ),
    'commerce_store_presave' => array(
      'group' => 'commerce',
    ),
    'commerce_store_insert' => array(
      'group' => 'commerce',
    ),
    'commerce_store_update' => array(
      'group' => 'commerce',
    ),
    'commerce_store_can_delete' => array(
      'group' => 'commerce',
    ),
    'commerce_store_delete' => array(
      'group' => 'commerce',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_entity_info().
 */
function commerce_store_entity_info() {
  $return = array(
    'commerce_store' => array(
      'label' => t('Commerce Store'),
      'controller class' => 'CommerceStoreEntityController',
      'base table' => 'commerce_store',
      'revision table' => 'commerce_store_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'store_id',
        'bundle' => 'type',
        'label' => 'title',
        'revision' => 'revision_id',
        'language' => 'language',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_store_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'commerce_store_uri',
      // Don't let Entity API auto-generate the property info.
      'metadata controller class' => '',
      'token type' => 'commerce-store',
      'access callback' => 'commerce_entity_access',
      'access arguments' => array(
        'user key' => 'uid',
        'access tag' => 'commerce_store_access',
      ),
      'permission labels' => array(
        'singular' => t('store'),
        'plural' => t('stores'),
      ),

      // Prevent Redirect alteration of the store form.
      'redirect' => FALSE,

      // Add translation support.
      'translation' => array(
        'locale' => TRUE,
        'entity_translation' => array(
          'class' => 'EntityTranslationCommerceStoreHandler',
          'bundle callback' => 'commerce_store_entity_translation_supported_type',
          'default settings' => array(
            'default_language' => LANGUAGE_NONE,
            'hide_language_selector' => FALSE,
          ),
        ),
      ),

      // Add title replacement support for translations.
      'field replacement' => array(
        'title' => array(
          'field' => array(
            'type' => 'text',
            'cardinality' => 1,
            'translatable' => TRUE,
          ),
          'instance' => array(
            'label' => t('Title'),
            'required' => TRUE,
            'settings' => array(
              'text_processing' => 0,
            ),
            'widget' => array(
              'weight' => -5,
            ),
          ),
        ),
      ),
    ),
  );

  foreach (commerce_store_type_get_name() as $type => $name) {
    $return['commerce_store']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $return;
}

/**
 * Entity uri callback: gives modules a chance to specify a path for a store.
 */
function commerce_store_uri($store) {
  // Allow modules to specify a path, returning the first one found.
  foreach (module_implements('commerce_store_uri') as $module) {
    $uri = module_invoke($module, 'commerce_store_uri', $store);

    // If the implementation returned data, use that now.
    if (!empty($uri)) {
      return $uri;
    }
  }

  return NULL;
}

/**
 * Implements hook_file_download_access().
 *
 * This hook is grants access to files based on a user's access to the entity
 * a file is attached to. For example, users with access to a store should be
 * allowed to download files attached to that store. Here we do this on a per-
 * field basis for files attached to stores.
 *
 * @param $field
 *   The field to which the file belongs.
 * @param $entity_type
 *   The type of $entity; for example, 'node' or 'user' or 'commerce_store'.
 * @param $entity
 *   The $entity to which $file is referenced.
 *
 * @return
 *   TRUE if access should be allowed by this entity or FALSE if denied. Note
 *   that denial may be overridden by another entity controller, making this
 *   grant permissive rather than restrictive.
 */
function commerce_store_file_download_access($field, $entity_type, $entity) {
  if ($entity_type == 'commerce_store') {
    return field_access('view', $field, $entity_type, $entity);
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * See https://drupal.org/node/1471706 for why there is no label configuration
 * for these pseudo fields on the entity type Manage Display admin page.
 */
function commerce_store_field_extra_fields() {
  $extra = array();

  foreach (commerce_store_types() as $type => $store_type) {
    $extra['commerce_store'][$type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('Store module title form element'),
          'weight' => -5,
        ),
        'status' => array(
          'label' => t('Status'),
          'description' => t('Store module status form element'),
          'weight' => 35,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('Full store title'),
          'theme' => 'commerce_store_title',
          'weight' => -5,
        ),
        'status' => array(
          'label' => t('Status'),
          'description' => t('Whether the store is active or disabled'),
          'theme' => 'commerce_store_status',
          'weight' => 5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_theme().
 */
function commerce_store_theme() {
  return array(
    'commerce_store_title' => array(
      'variables' => array('title' => NULL, 'label' => NULL, 'store' => NULL),
      'path' => drupal_get_path('module', 'commerce_store') . '/theme',
      'template' => 'commerce-store-title',
    ),
    'commerce_store_status' => array(
      'variables' => array('status' => NULL, 'label' => NULL, 'store' => NULL),
      'path' => drupal_get_path('module', 'commerce_store') . '/theme',
      'template' => 'commerce-store-status',
    ),
  );
}

/**
 * Returns an array of store type arrays keyed by type.
 */
function commerce_store_types() {
  // First check the static cache for a store types array.
  $store_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($store_types)) {
    $store_types = array();

    // Find store types defined by hook_commerce_store_type_info().
    foreach (module_implements('commerce_store_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_store_type_info') as $type => $store_type) {
        // Set the module each store type is defined by and revision handling
        // if they aren't set yet.
        $store_type += array(
          'module' => $module,
          'revision' => 1,
        );
        $store_types[$type] = $store_type;
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('commerce_store_type_info', $store_types);
  }

  return $store_types;
}

/**
 * Resets the cached list of store types.
 */
function commerce_store_types_reset() {
  $store_types = &drupal_static('commerce_store_types');
  $store_types = NULL;
  entity_info_cache_clear();
}

/**
 * Loads a store type.
 *
 * @param $type
 *   The machine-readable name of the store type; accepts normal machine names
 *     and URL prepared machine names with underscores replaced by hyphens.
 */
function commerce_store_type_load($type) {
  $type = strtr($type, array('-' => '_'));
  $store_types = commerce_store_types();
  return !empty($store_types[$type]) ? $store_types[$type] : FALSE;
}

/**
 * Returns the human readable name of any or all store types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all store type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_store_type_get_name($type = NULL) {
  $store_types = commerce_store_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($store_types[$type])) {
      return $store_types[$type]['name'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($store_types as $key => $value) {
    $store_types[$key] = $value['name'];
  }

  return $store_types;
}

/**
 * Wraps commerce_store_type_get_name() for the Entity module.
 */
function commerce_store_type_options_list() {
  return commerce_store_type_get_name();
}

/**
 * Returns a path argument from a store type.
 */
function commerce_store_type_to_arg($type) {
  return strtr($type, '_', '-');
}

/**
 * Returns an initialized store object.
 *
 * @param $type
 *   The machine-readable type of the store.
 *
 * @return
 *   A store object with all default fields initialized.
 */
function commerce_store_new($type = 'store') {
  return entity_get_controller('commerce_store')->create(array('type' => $type));
}

/**
 * Saves a store.
 *
 * @param $store
 *   The full store object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_store_save($store) {
  return entity_get_controller('commerce_store')->save($store);
}

/**
 * Loads a store by ID.
 */
function commerce_store_load($store_id = NULL, $conditions = array(), $reset = FALSE) {
  if (empty($store_id) && empty($conditions)) {
    return FALSE;
  }

  $stores = commerce_store_load_multiple(array($store_id), $conditions, $reset);
  return $stores ? reset($stores) : FALSE;
}

/**
 * Loads multiple stores by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $store_ids
 *   An array of store IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_store} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal store loading cache.
 *
 * @return
 *   An array of store objects indexed by store_id.
 */
function commerce_store_load_multiple($store_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($store_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('commerce_store', $store_ids, $conditions, $reset);
}

/**
 * Loads a store by title.
 */
function commerce_store_load_by_title($title) {
  $stores = commerce_store_load_multiple(array(), array('title' => $title));
  return $stores ? reset($stores) : FALSE;
}

/**
 * Determines whether or not the give store can be deleted.
 *
 * @param $store
 *   The store to be checked for deletion.
 *
 * @return
 *   Boolean indicating whether or not the store can be deleted.
 */
function commerce_store_can_delete($store) {
  // Return FALSE if the given store does not have an ID; it need not be
  // deleted, which is functionally equivalent to cannot be deleted as far as
  // code depending on this function is concerned.
  if (empty($store->store_id)) {
    return FALSE;
  }

  // If any module implementing hook_commerce_store_can_delete() returns FALSE
  // the store cannot be deleted. Return TRUE if none return FALSE.
  return !in_array(FALSE, module_invoke_all('commerce_store_can_delete', $store));
}

/**
 * Deletes a store by ID.
 *
 * @param $store_id
 *   The ID of the store to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_store_delete($store_id) {
  return commerce_store_delete_multiple(array($store_id));
}

/**
 * Deletes multiple stores by ID.
 *
 * @param $store_ids
 *   An array of store IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_store_delete_multiple($store_ids) {
  return entity_get_controller('commerce_store')->delete($store_ids);
}

/**
 * Checks store access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $store
 *   Optionally a store to check access for or for the create operation the
 *   store type. If nothing is given access permissions for all stores are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function commerce_store_access($op, $store = NULL, $account = NULL) {
  return commerce_entity_access($op, $store, $account, 'commerce_store');
}

/**
 * Callback for getting store properties.
 * @see commerce_store_entity_property_info()
 */
function commerce_store_get_properties($store, array $options, $name) {
  switch ($name) {
    case 'creator':
      return $store->uid;
    case 'view_url':
      return url('store/' . $store->store_id, $options);
    case 'edit_url':
      return url('store/' . $store->store_id . '/edit', $options);
  }
}

/**
 * Callback for setting store properties.
 * @see commerce_store_entity_property_info()
 */
function commerce_store_set_properties($store, $name, $value) {
  if ($name == 'creator') {
    $store->uid = $value;
  }
}

/**
 * Returns output for store autocompletes.
 *
 * The values returned will be keyed by SKU and appear as such in the textfield,
 * even though the preview in the autocomplete list shows "SKU: Title".
 */
function commerce_store_autocomplete($entity_type, $field_name, $bundle, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $matches = array();

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($string);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  if (!empty($tag_last)) {
    $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';

    // Determine the type of autocomplete match to use when searching for stores.
    $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';

    // Get an array of matching stores.
    // Use access tag, so we display only those stores the user has access to.
    $stores = commerce_store_match_stores($field, $instance, $tag_last, $match, array(), 10, TRUE);

    // Loop through the stores and convert them into autocomplete output.
    foreach ($stores as $store_id => $data) {
      $matches[$prefix . $data['title']] = $data['rendered'];
    }
  }

  drupal_json_output($matches);
}

/**
 * Fetches an array of all stores matching the given parameters.
 *
 * This info is used in various places (allowed values, autocomplete results,
 * input validation...). Some of them only need the store_ids, others
 * store_id + titles, others yet store_id + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets calling functions use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter SKUs and titles on (used by autocomplete).
 * @param $match
 *   Operator to match filtered SKUs and titles against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional store ids to lookup (used when $string and $match arguments are
 *   not given).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 * @param $access_tag
 *   Boolean indicating whether or not an access control tag should be added to
 *   the query to find matching store data. Defaults to FALSE.
 *
 * @return
 *   An array of valid stores in the form:
 *   array(
 *     store_id => array(
 *       'title' => The store title,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function commerce_store_match_stores($field, $instance = NULL, $string = '', $match = 'contains', $ids = array(), $limit = 50, $access_tag = FALSE) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = implode(':', array(
    $field['field_name'],
    $match,
    ($string !== '' ? $string : implode('-', $ids)),
    $limit,
  ));

  if (!isset($results[$cid])) {
    $matches = _commerce_store_match_stores_standard($instance, $string, $match, $ids, $limit, $access_tag);

    // Store the results.
    $results[$cid] = !empty($matches) ? $matches : array();
  }

  return $results[$cid];
}

/**
 * Helper function for commerce_store_match_stores().
 *
 * Returns an array of stores matching the specific parameters.
 */
function _commerce_store_match_stores_standard($instance, $string = '', $match = 'contains', $ids = array(), $limit = 50, $access_tag = FALSE) {
  // Build the query object with the necessary fields.
  $query = db_select('commerce_store', 'cp');

  // Add the access control tag if specified.
  if ($access_tag) {
    $query->addTag('commerce_store_access');
  }

  // Add a global query tag so anyone can alter this query.
  $query->addTag('commerce_store_match');

  $store_id_alias = $query->addField('cp', 'store_id');
  $store_title_alias = $query->addField('cp', 'title');
  $store_type_alias = $query->addField('cp', 'type');

  // Add a condition to the query to filter by matching store types.
  if (!empty($instance['settings']['referenceable_types'])) {
    $types = array_diff(array_values($instance['settings']['referenceable_types']), array(0, NULL));

    // Only filter by type if some types have been specified.
    if (!empty($types)) {
      $query->condition('cp.type', $types, 'IN');
    }
  }

  if ($string !== '') {
    $args = array();

    // Build a where clause matching on either the SKU or title.
    switch ($match) {
      case 'contains':
        $where = '(cp.title LIKE :title_match)';
        $args['title_match'] = '%' . $string . '%';
        break;

      case 'starts_with':
        $where = '(cp.title LIKE :title_match)';
        $args['title_match'] = $string . '%';
        break;

      case 'equals':
      default:
        $where = '(cp.title = :title_match)';
        $args['title_match'] = $string;
        break;
    }

    $query->where($where, $args);
  }
  elseif ($ids) {
    // Otherwise add a store_id specific condition if specified.
    $query->condition($store_id_alias, $ids, 'IN', $ids);
  }

  // Order the results by SKU, title, and then store type.
  $query
    ->orderBy($store_title_alias)
    ->orderBy($store_type_alias);

  // Add a limit if specified.
  if ($limit) {
    $query->range(0, $limit);
  }

  // Execute the query and build the results array.
  $result = $query->execute();

  $matches = array();

  foreach ($result->fetchAll() as $store) {
    $matches[$store->store_id] = array(
      'type' => $store->type,
      'title' => $store->title,
      'rendered' => t('@title', array('@title' => $store->title)),
    );
  }

  return $matches;
}

/**
 * Returns whether the given store type has support for translations.
 *
 * @param $type
 *   The machine-name of the store type to check for translation support.
 *
 * @return
 *   TRUE or FALSE indicating translation support for the requested type.
 */
function commerce_store_entity_translation_supported_type($type) {
  return variable_get('language_store_type_' . $type, 0) == ENTITY_TRANSLATION_ENABLED;
}

/**
 * Sanitizes the store title before output.
 */
function template_preprocess_commerce_store_title(&$variables) {
  $variables['title'] = check_plain($variables['title']);
}

/**
 * Returns the options list for the store status property.
 */
function commerce_store_status_options_list() {
  return array(
    0 => t('Disabled'),
    1 => t('Active'),
  );
}

/**
 * Converts the store status integer to a string before output.
 */
function template_preprocess_commerce_store_status(&$variables) {
  $variables['status'] = empty($variables['status']) ? t('Disabled') : t('Active');
}
