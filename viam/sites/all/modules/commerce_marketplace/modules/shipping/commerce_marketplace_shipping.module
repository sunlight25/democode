<?php

/**
 * @file
 * Adapts core shipping features for Commerce Marketplace.
 */

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function commerce_marketplace_shipping_commerce_checkout_pane_info_alter(&$checkout_panes) {
  global $user;

  // @TODO: Do something with this shite.
  // This chunk of code is taken from commerce_checkout_panes(), and is meant to
  // populate missing $checkout_panes defaults. The issue here is that function
  // commerce_checkout_panes() indirectly calls itself through
  // commerce_marketplace_cart_order_load_multiple() below, and the second time
  // $checkout_panes in commerce_checkout_panes() are already populated, but not
  // yet fully, so we go directly to the second section ($conditions checks)
  // without fully going through the first one.
  // Something like:
  //    commerce_order_statuses()
  //    hook_commerce_order_status_info()
  //    commerce_checkout_commerce_order_status_info()
  //    commerce_checkout_pages()
  //    commerce_checkout_panes()
  //    hook_commerce_checkout_pane_info_alter()
  //    commerce_marketplace_payment_commerce_checkout_pane_info_alter()
  //    commerce_marketplace_cart_order_load_multiple()
  //    commerce_marketplace_cart_order_ids()
  //    commerce_order_statuses()
  foreach ($checkout_panes as $pane_id => $checkout_pane) {
    // Set some defaults for the checkout pane.
    $defaults = array(
      'base' => $pane_id,
      'name' => $checkout_pane['title'],
      'page' => 'checkout',
      'locked' => FALSE,
      'fieldset' => TRUE,
      'collapsible' => FALSE,
      'collapsed' => FALSE,
      'weight' => 0,
      'enabled' => TRUE,
      'review' => TRUE,
      'callbacks' => array(),
      'file' => '',
    );
    $checkout_pane += $defaults;
    // Merge in default callbacks.
    foreach (array('settings_form', 'checkout_form', 'checkout_form_validate', 'checkout_form_submit', 'review') as $callback) {
      if (!isset($checkout_pane['callbacks'][$callback])) {
        $checkout_pane['callbacks'][$callback] = $checkout_pane['base'] . '_' . $callback;
      }
    }
    $checkout_panes[$pane_id] = $checkout_pane;
  }

  // When payments should be sent directly to the merchants, but there is no
  // enabled parallel payment common for all orders in the order group, we use
  // marketplace-specific checkout panes instead of the default ones, at the
  // same time moving some standard panes (ie. Shipping in this case) to a
  // different checkout page.
  // Also see commerce_marketplace_payment_commerce_checkout_pane_info_alter()
  $menu_item = menu_get_item();
  if (strpos($menu_item['path'], 'checkout/%') === 0) {
    $order = $menu_item['page_arguments'][0];
  }
  else {
    // This will load only orders with the 'shopping cart' status, while here
    // we need ALL orders from the order group, regardless of their status
    // (even those with the 'Payment' status) - that's why we'd need to load
    // them again below based on the order_group ID.
    $orders = commerce_marketplace_cart_order_load_multiple($user->uid);
    $order = reset($orders);
  }
  if (
    variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) == 'merchants'
    && !empty($order->order_group)
    && ($orders = commerce_marketplace_order_group_load($order->order_group))
    && !commerce_marketplace_payment_common_enabled_parallel_payment_methods($orders)
    && commerce_marketplace_order_count($orders) > 1
  ) {
    $checkout_panes['commerce_shipping']['page'] = 'reviews';
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_marketplace_shipping_form_alter(&$form, &$form_state, $form_id) {

  // Add extra wrapper for the whole form, so that we can update it via ajax
  // callback (see commerce_marketplace_payment_pane_checkout_form()).
  // Also see commerce_marketplace_payment_form_alter().
  if (!empty($form['commerce_shipping'])) {

    // Do not display shipping method selection form for orders that already have
    // been paid.
    $order_status = commerce_order_status_load($form_state['order']->status);
    if (!$order_status['cart']) {
      unset($form['commerce_shipping']);
    }

    // Update default shipping method selection ajax callback to ours, so that
    // we can update the whole pane content (including shipping costs in the
    // Shopping cart contents view), not only shipping method selection radios.
    if (!empty($form['commerce_shipping']['shipping_service'])) {

      // Add generic form wrapper with the order ID.
      $wrapper_id = 'commerce-checkout-form-' . $form_state['order']->order_id;
      $form['#prefix'] = '<div id="' . $wrapper_id . '">';
      $form['#suffix'] = '</div>';

      // Update ajax callback to refresh the whole form.
      $form['commerce_shipping']['shipping_service']['#ajax'] = array(
        'callback' => 'commerce_marketplace_shipping_pane_service_details_refresh',
        'wrapper' => $wrapper_id,
      );
    }

    // Shipping service pane form was not submitted yet, but one of available
    // services is always selected by default, so we need to add it to the order
    // anyway, so it is shown in Shopping cart contents view above.
    if (
      !isset($form_state['triggering_element'])
      && !empty($form['commerce_shipping']['shipping_service']['#default_value'])
      // This should be done only when we have multiple orders displayed on the
      // Reviews checkout page (so generally when Marketplace Review pane is
      // displayed), as otherwise standard shipping submit should be enough.
      && !empty($form['commerce_marketplace_review'])
    ) {
      $selected_shipping_service = $form['commerce_shipping']['shipping_service']['#default_value'];
      // Add shopping service to the current order.
      $order = commerce_order_load($form_state['order']->order_id);
      module_load_include('inc', 'commerce_shipping', 'commerce_shipping.rules');
      commerce_shipping_rate_apply($order, $selected_shipping_service);
      commerce_order_save($order);
      $form_state['order'] = $form_state['orders'][$order->order_id] = $order;
      // Update Shopping cart contents view.
      list($view_id, $display_id) = explode('|', variable_get('commerce_cart_contents_pane_view', 'commerce_cart_summary|default'));
      if (!empty($view_id) && !empty($display_id)) {
        $form['commerce_marketplace_review']['review']['#data']['cart_contents']['data'] = commerce_embed_view($view_id, $display_id, array($form_state['order']->order_id));
      }
    }

  }

  // If shipping method selection subform was submitted, update relevant orders
  // and Shopping cart contents view.
  if (
    isset($form_state['triggering_element'])
    && $form_state['triggering_element']['#name'] == 'commerce_shipping[shipping_service]'
    // This should be done only when we have multiple orders displayed on the
    // Reviews checkout page (so generally when Marketplace Review pane is
    // displayed), as otherwise standard shipping submit should be enough.
    && !empty($form['commerce_marketplace_review'])
  ) {
    // Update shipping service for the current order.
    $checkout_pane_id = array('pane_id' => 'commerce_shipping');
    $order = commerce_order_load($form_state['order']->order_id);
    module_load_include('inc', 'commerce_shipping', 'includes/commerce_shipping.checkout_pane');
    commerce_shipping_pane_checkout_form_submit($form, $form_state, $checkout_pane_id, $order);
    commerce_order_save($order);

    // Add updated order back to the form state.
    $form_state['order'] = $form_state['orders'][$order->order_id] = $order;

    // Update Shopping cart contents view.
    list($view_id, $display_id) = explode('|', variable_get('commerce_cart_contents_pane_view', 'commerce_cart_summary|default'));
    if (!empty($view_id) && !empty($display_id)) {
      $form['commerce_marketplace_review']['review']['#data']['cart_contents']['data'] = commerce_embed_view($view_id, $display_id, array($form_state['order']->order_id));
    }
  }

}

/**
 * Ajax callback: Returns the shipping details form elements that match the
 * currently selected shipping service.
 *
 * Overrides commerce_shipping_pane_service_details_refresh(), returns the whole
 * pane content (including shipping costs in the Shopping cart contents view),
 * not only shipping method selection radios.
 *
 * @see commerce_marketplace_shipping_form_commerce_checkout_form_reviews_alter()
 * @see commerce_shipping_pane_service_details_refresh()
 */
function commerce_marketplace_shipping_pane_service_details_refresh($form, $form_state) {
  return $form;
}
