<?php

/**
 * @file
 *
 */

/**
 * Implements hook_menu().
 */
function commerce_marketplace_menu() {
  $items = array();

  $items['admin/commerce/marketplace'] = array(
    'title' => 'Marketplace',
    'description' => 'Configure Marketplace settings for your store.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_entity_access().
 */
function commerce_marketplace_commerce_entity_access($op, $entity, $account, $entity_type) {
  // Get all entity types that reference store entity.
  $store_referencing_entity_types = &drupal_static(__FUNCTION__);
  if (empty($store_referencing_entity_types)) {
    $store_referencing_entity_types = array_keys(commerce_marketplace_referencing_entity_types());
  }
  // If current entity references store entity, check the store owner, and allow
  // access if store owner is the same as current user.
  if (in_array($entity_type, $store_referencing_entity_types)) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    if (!empty($entity->commerce_store) && $wrapper->commerce_store->uid->value() == $account->uid) {
      return TRUE;
    }
  }
}

/**
 * Configures selected entity types to reference a commerce store.
 */
function commerce_marketplace_configure_referencing_entity_types() {
  foreach (commerce_marketplace_referencing_entity_types() as $entity_type => $bundles) {
    commerce_marketplace_configure_referencing_entity_type($entity_type, $bundles);
  }
}

/**
 * Implements hook_field_attach_create_bundle()
 *
 * Adds commerce_store field to bundles that so merit.
 */
function commerce_marketplace_field_attach_create_bundle($entity_type, $bundle) {
  drupal_static_reset('commerce_product_types');
  // Add the field only on bundles of entity types which should reference
  // the store entity type.
  $referencing_entity_types = commerce_marketplace_referencing_entity_types();
  if (
    !empty($referencing_entity_types[$entity_type])
    && in_array($bundle, $referencing_entity_types[$entity_type])
  ) {
    commerce_marketplace_configure_referencing_entity_type($entity_type, array($bundle));
  }
}

/**
 * Returns an array of entity types and their bundles
 * which should be referencing commerce store.
 *
 * @TODO: Not sure yet if all of those will really be needed,
 * so perhaps at one point some should be removed.
 */
function commerce_marketplace_referencing_entity_types() {
  $entity_types = array();

  // Add Store field to all commerce_product bundles.
  if (module_exists('commerce_product')) {
    $entity_types['commerce_product'] = array_keys(commerce_product_types());
  }

  // Add store field to product bundle of commerce_order.
  if (module_exists('commerce_order')) {
    $entity = entity_get_info('commerce_order');
    $entity_types['commerce_order'] = array_keys($entity['bundles']);
  }

  // Allow the entity types to be altered by other modules.
  drupal_alter('commerce_marketplace_referencing_entity_types', $entity_types);

  return $entity_types;
}

/**
 * Ensures the store reference field is present
 * on selected bundles of the specified entity types.
 */
function commerce_marketplace_configure_referencing_entity_type($entity_type, $bundles) {
  foreach ($bundles as $bundle) {
    commerce_marketplace_create_instance('commerce_store', $entity_type, $bundle, t('Store'));
  }
}

/**
 * Creates a required, locked instance of a store reference field on the
 * specified bundle.
 *
 * @param $field_name
 *   The name of the field; if it already exists, a new instance of the existing
 *     field will be created. For fields governed by the Commerce modules, this
 *     should begin with commerce_.
 * @param $entity_type
 *   The type of entity the field instance will be attached to.
 * @param $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param $label
 *   The label of the field instance.
 * @param $weight
 *   The default weight of the field instance widget and display.
 */
function commerce_marketplace_create_instance($field_name, $entity_type, $bundle, $label, $weight = 0) {
  // If a field type we know should exist isn't found, clear the Field cache.
  if (!field_info_field_types('entityreference')) {
    field_cache_clear();
  }

  // Check if the field already exists, and create it if it doesn't.
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',
      'module' => 'entityreference',
      'cardinality' => 1,
      'translatable' => FALSE,
      'locked' => FALSE,
      'foreign keys' => array(
        'commerce_store' => array(
          'columns' => array(
            'target_id' => 'store_id',
          ),
          'table' => 'commerce_store',
        ),
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(),
        ),
        'target_type' => 'commerce_store',
      ),
    );
    field_create_field($field);
  }

  // Check if the field instance already exists, and create it if it doesn't.
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,

      'label' => $label,
      'required' => FALSE,
      'settings' => array(),

      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => 60,
        ),
        'type' => 'entityreference_autocomplete',
        'weight' => $weight,
      ),
    );

    // On instances attached to commerce_product entity type
    // additionally add order and cart splitting configuration.
    if ($entity_type == 'commerce_product') {
      $instance['commerce_marketplace_cart_settings'] = array(
        'order_splitter_field' => 1,
        'cart_splitter_field' => 0,
      );
    }

    // Set the default display formatters for various view modes.
    foreach (array('default', 'full', 'teaser') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => $weight,
      );
    }

    field_create_instance($instance);
  }
}
